AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  todo-app

  Sample SAM Template for todo-app

Parameters:
  StackPrefix:
    Description: Stack Resource Name Prefix
    Type: String
    Default: Demo
  TracingValue:
    Type: String
    Default: Active
  Stage:
    Type: String
    AllowedValues:
      - Prod
      - Staging
      - Dev
    Default: Prod
  MemorySize:
    Type: Number
    MinValue: 128
    MaxValue: 10240
    Default: 128  
  HelloWorldFunctionName:
    Type: String
    Default: hello-world
  BffFunctionName:
    Type: String
    Default: bff-function


Mappings:
  PowertoolsLayerMap:
    #Tokyo
    ap-northeast-1:
      x86: arn:aws:lambda:ap-northeast-1:017000801446:layer:AWSLambdaPowertoolsPythonV2:71
      arm: arn:aws:lambda:ap-northeast-1:017000801446:layer:AWSLambdaPowertoolsPythonV2-Arm64:71
    #Osaka
    ap-northeast-3:
      x86: arn:aws:lambda:ap-northeast-3:017000801446:layer:AWSLambdaPowertoolsPythonV2:71
      arm: arn:aws:lambda:ap-northeast-3:017000801446:layer:AWSLambdaPowertoolsPythonV2-Arm64:71
#  AppConfigExtentionsLayerMap:
#    #Tokyo
#    ap-northeast-1:
#      x86: arn:aws:lambda:ap-northeast-1:980059726660:layer:AWS-AppConfig-Extension:98           
#      arm: arn:aws:lambda:ap-northeast-1:980059726660:layer:AWS-AppConfig-Extension-Arm64:51           
#    #Osaka
#    ap-northeast-3:
#      x86: arn:aws:lambda:ap-northeast-3:706869817123:layer:AWS-AppConfig-Extension:101           
#      arm: arn:aws:lambda:ap-northeast-3:706869817123:layer:AWS-AppConfig-Extension-Arm64:16
#  LambdaInsightsExtensionsLayerMap:
#    #Tokyo
#    ap-northeast-1:
#      x86: arn:aws:lambda:ap-northeast-1:580247275435:layer:LambdaInsightsExtension:72    
#      arm: arn:aws:lambda:ap-northeast-1:580247275435:layer:LambdaInsightsExtension-Arm64:23
#    #Osaka
#    ap-northeast-3:
#      x86: arn:aws:lambda:ap-northeast-3:194566237122:layer:LambdaInsightsExtension:26
#      arm: arn:aws:lambda:ap-northeast-3:194566237122:layer:LambdaInsightsExtension-Arm64:9   

Conditions:
  TracingEnabled: !Equals
    - !Ref TracingValue
    - Active

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:    
    Runtime: python3.10
    Architectures:
    - x86_64
    Timeout: 5
    MemorySize: !Ref MemorySize
    Tracing: !Ref TracingValue
    VpcConfig:
      SecurityGroupIds:
        - Fn::ImportValue: !Sub ${StackPrefix}-LambdaSecurityGroup-ID
      SubnetIds:
        - Fn::ImportValue: !Sub ${StackPrefix}-PrivateSubnetOneId
        - Fn::ImportValue: !Sub ${StackPrefix}-PrivateSubnetTwoId    
    Environment:
      Variables:   
        # Timezone
        TZ: Asia/Tokyo      
        #Power Tools Environment Variables
        #TODO: Parameterize
        POWERTOOLS_LOG_LEVEL: INFO
        #POWERTOOLS_DEV: true
        #POWERTOOLS_LOGGER_LOG_EVENT: true

        #TODO: Add Environment Variables 
        HOGE: Hoge
    # Deployment Configurtion
    AutoPublishAlias: live
    DeploymentPreference:
      #Type: Linear10PercentEvery1Minute
      Type: AllAtOnce
    
    Layers:
    # Powertools Lambda Layer
    - !FindInMap [PowertoolsLayerMap, !Ref AWS::Region , x86]
    # AppConfig Extensions Lambda Layer    
    #  - !FindInMap [AppConfigExtentionsLayerMap, !Ref AWS::Region , x86]
    # Lambda Insights Extensions Lambda Layer    
    #  - !FindInMap [LambdaInsightsExtensionsLayerMap, !Ref AWS::Region , x86]    
  Api:
    OpenApiVersion: 3.0.3
    TracingEnabled: !If [TracingEnabled, true, false]
    MethodSettings:
      - DataTraceEnabled: true
        LoggingLevel: ERROR
        ResourcePath: /*
        HttpMethod: '*'
    AccessLogSetting:
      Format: '{ "requestId":"$context.requestId", "extendedRequestId":"$context.extendedRequestId", "ip": "$context.identity.sourceIp", "caller":"$context.identity.caller", "user":"$context.identity.user", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod", "resourcePath":"$context.resourcePath", "status":"$context.status", "protocol":"$context.protocol", "responseLength":"$context.responseLength", "integrationLatency":"$context.integration.latency", "responseLatency":"$context.responseLatency" }'
      DestinationArn: !GetAtt ApiGwAccessLogGroup.Arn    
Resources:
# Bff Function
  BffFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Ref BffFunctionName
      CodeUri: app/bff/
      Handler: app.lambda_handler
      Role: !ImportValue
        Fn::Sub: ${StackPrefix}-LambdaRoleArn
      Events:
        Event:
          Type: Api
          Properties:
            Path: /bff-api/{proxy+}
            Method: ANY
            RestApiId: !Ref BffApi
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: !Ref BffFunctionName

# Hello World Function
  HelloWorldFunction:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName: !Ref HelloWorldFunctionName
      CodeUri: app/hello_world/
      Handler: app.lambda_handler   
      Role: !ImportValue
        Fn::Sub: ${StackPrefix}-LambdaRoleArn         
      Events:
        HelloWorld:
          Type: Api 
          Properties:
            Path: /hello
            Method: get
            RestApiId: !Ref HelloApi

# API Gateway Private REST API
# Bff API(Regional Public API)
  BffApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: bff-api
      StageName: !Ref Stage
      EndpointConfiguration:
        Type: REGIONAL

# HelloWorld(Private API)
  HelloApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: hello-world-api
      StageName: !Ref Stage 
      EndpointConfiguration:
        Type: PRIVATE
        VPCEndpointIds:
          - Fn::ImportValue: !Sub ${StackPrefix}-PrivateAPIVPCEndpoint-ID
      Auth:
        ResourcePolicy:
          CustomStatements:
            - Effect: Allow
              Principal: '*'
              Action: execute-api:Invoke
              Resource: !Sub execute-api:/${Stage}/GET/hello
              Condition:
                StringEquals:
                  aws:SourceVpce: !ImportValue
                    Fn::Sub: ${StackPrefix}-PrivateAPIVPCEndpoint-ID       
# IAM Role for API Gateway Account
  APIGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
# API Gateway Account Config
  ApiGwAccountConfig:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt APIGatewayRole.Arn
# API Gateway Access Log Group
  ApiGwAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/accesslog/${AWS::StackName}
      RetentionInDays: 7
# Lambda Log group
  HelloWorldFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${HelloWorldFunctionName}
      RetentionInDays: 7
  BffFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${BffFunctionName}
      RetentionInDays: 7

# Application Insights
  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'
Outputs:
  BffAPI:
    Description: API Gateway endpoint URL for Bff
    Value: !Sub https://${BffApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/bff-api
  BffFunction:
    Description: Bff Lambda Function ARN
    Value: !GetAtt BffFunction.Arn
  BffFunctionDeploymentGroup:
    Description: Bff Lambda Function DeploymentGroup ARN
    Value: !Ref BffFunctionDeploymentGroup
  HelloWorldAPI:
    Description: API Gateway endpoint URL for HelloWorld
    Value: !Sub https://${HelloApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/hello
  HelloWorldFunction:
    Description: First Lambda Function ARN
    Value: !GetAtt HelloWorldFunction.Arn